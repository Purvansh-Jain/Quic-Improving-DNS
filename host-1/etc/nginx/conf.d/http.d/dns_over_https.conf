#--- THIS IS NOT EASY AS YOU THINK. EXTENSIVE KNOWLEDGE ON PROTOCOLS IS A MUST TO CONFIGURE THIS---#

# Convert HTTP to DNS and vice-versa first for post processing.
upstream http_to_dns {
    # Create a Shared Memory Zone of 64 KB for Worker Processes.
    zone http_to_dns 64k;

    # The Upstream nginx_module_njs Server.
    server 127.0.0.255:1311;

    # Don't maintain idle connections over 60s. Wastage of resources!
    keepalive_timeout 60s;

    # Send atmost 100 keepalive requests to the Upstream! Optimal.
    keepalive_requests 100;

    # Use "10" seconds keep-alive. Wastage of resources!
    keepalive 10;
}

# Cache the content, we don't want to create burden to our BIND9 Server.
# Also, maintain minimum age. We don't want to serve expired DNS Content residing in the cache!
proxy_cache_path /var/cache/nginx/doh_cache levels=1:2 keys_zone=doh_cache:10m;

# The main DNS over HTTPS Server.
server {
    # The Server Name Directive.
    server_name dns.team-h.ml;
    
    # Listen on TCP/IPv4 on specific IP address, with SSL Termination, HTTP/2 and HTTP/3.
    listen 172.31.44.223:443 ssl http2;
    listen 172.31.44.223:443 http3 quic reuseport;

    # Listen on TCP/IPv6 on specific IP address, with SSL Termination, HTTP/2 and HTTP/3.
    listen [2406:da1a:d19:3d02:18af:b81c:e462:79f8]:443 ssl http2;
    listen [2406:da1a:d19:3d02:18af:b81c:e462:79f8]:443 http3 reuseport;

    # The SSL/TLS Certificates and Key.
    ssl_certificate /etc/ssl/certs/chainc.pem;
    ssl_certificate_key /etc/ssl/private/chaink.pem;

    # Include SSL/TLS config.directives for strong ciphersuites and PFS.
    include zap/ssl.conf;

    # Distribute traffic using CDN. Allow only CDN.
    include zap/cdn.conf;

    # Include stylized_error_pages.
    include zap/error_pages.conf;

    # Include Security Headers and HSTS PRELOAD.
    include zap/headers_hsts_preload.conf;

    # Include Headers for HTTP/3, QUIC.
    include zap/http3_quic.conf;

    # Use methods GET and POST from the cache "doh_cache".
    proxy_cache_methods GET POST;

    # Follow "IETF" and "RFC" Standards. Return HTTP 404 for "/".
    location / {
        # Send HTTP/200 "text/html" as MIME.
	return 200 "<h1><center>404</center></h1>";
	add_header Content-Type "text/html";
    }

    # Follow "IETF" and "RFC" Standards. Return DNS RESPONSE if in "dns-query/{?dns=}
    location /dns-query {
        # Downgrade HTTP/2 and HTTP/3 to HTTP/1.1 for Upstream Servers.
        proxy_http_version 1.1;

        # Enable HTTP/1.1 "Keep-Alive", maintain 1 consistent connection instead of each one for every request! Very inefficient if done so.
        proxy_set_header Connection "";

        # Set the Cache as "doh_cache", thus enabling caching.
        proxy_cache doh_cache;

        # We need to obviously cache "Request Body", so include args.
        proxy_cache_key $scheme$proxy_host$uri$is_args$args$request_body;
    
        # Finally pass it to the upstream "http_to_dns" for conversion.
        proxy_pass http://http_to_dns;
    }

}

# End of configuration.
# Team-H.
